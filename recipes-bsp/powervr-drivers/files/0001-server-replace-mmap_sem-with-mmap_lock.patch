From a352a70bc3fdbac94dfa1e7d9046e40137eed06e Mon Sep 17 00:00:00 2001
From: Xulin Sun <xulin.sun@windriver.com>
Date: Wed, 17 Mar 2021 13:52:48 +0800
Subject: [PATCH 1/2] server: replace mmap_sem with mmap_lock

mmap_sem locking api was updated in v5.10 and mmap_sem was renamed and use of
mmap_write_{lock,unlock} api is recommended.

da1c55f1b272f4bd ("mmap locking API: rename mmap_sem to mmap_lock")

Upstream-Status: Inappropriate [upstream is still using k5.4 version]

Signed-off-by: Xulin Sun <xulin.sun@windriver.com>
---
 services/server/common/cache_km.c                |  4 ++--
 services/server/env/linux/osfunc.c               | 10 +++++-----
 services/server/env/linux/physmem_extmem_linux.c | 12 ++++++------
 3 files changed, 13 insertions(+), 13 deletions(-)

diff --git a/services/server/common/cache_km.c b/services/server/common/cache_km.c
index 646fa24..8eddac7 100644
--- a/services/server/common/cache_km.c
+++ b/services/server/common/cache_km.c
@@ -1465,7 +1465,7 @@ static INLINE PVRSRV_ERROR CacheOpValidateVAOffset(PMR *psPMR,
 	}
 	else if (mm)
 	{
-		down_read(&mm->mmap_sem);
+		down_read(&mm->mmap_lock);
 
 		vma = find_vma(mm, (unsigned long)(uintptr_t)pvAddress);
 		if (!vma ||
@@ -1490,7 +1490,7 @@ static INLINE PVRSRV_ERROR CacheOpValidateVAOffset(PMR *psPMR,
 			pvAddress = NULL;		
 		}
 
-		up_read(&mm->mmap_sem);
+		up_read(&mm->mmap_lock);
 	}
 	else 
 	{
diff --git a/services/server/env/linux/osfunc.c b/services/server/env/linux/osfunc.c
index 91d66e7..fb7bd6c 100644
--- a/services/server/env/linux/osfunc.c
+++ b/services/server/env/linux/osfunc.c
@@ -1726,7 +1726,7 @@ PVRSRV_ERROR OSChangeSparseMemCPUAddrMap(void **psPageArray,
 	}
 
 	/* Acquire the memory sem */
-	down_write(&psMM->mmap_sem);
+	down_write(&psMM->mmap_lock);
 
 	psMapping = psVMA->vm_file->f_mapping;
 	
@@ -1843,7 +1843,7 @@ PVRSRV_ERROR OSChangeSparseMemCPUAddrMap(void **psPageArray,
 
 	eError = PVRSRV_OK;
 	eFailed:
-	up_write(&psMM->mmap_sem);
+	up_write(&psMM->mmap_lock);
 
 	return eError;
 }
diff --git a/services/server/env/linux/physmem_extmem_linux.c b/services/server/env/linux/physmem_extmem_linux.c
index b625ae6..56352e7 100644
--- a/services/server/env/linux/physmem_extmem_linux.c
+++ b/services/server/env/linux/physmem_extmem_linux.c
@@ -257,7 +257,7 @@ static IMG_BOOL _TryFindVMA(IMG_DEVMEM_SIZE_T uiSize,
 	IMG_UINT32 i;
 	uintptr_t uAddr;
 
-	down_read(&current->mm->mmap_sem);
+	down_read(&current->mm->mmap_lock);
 
 	/* Find the VMA */
 	psVMArea = find_vma(current->mm, pvCpuVAddr);
@@ -344,7 +344,7 @@ static IMG_BOOL _TryFindVMA(IMG_DEVMEM_SIZE_T uiSize,
 	/* Sanity check */
 	PVR_ASSERT(i == psPrivData->uiTotalNumPages);
 
-	up_read(&current->mm->mmap_sem);
+	up_read(&current->mm->mmap_lock);
 
 	return IMG_TRUE;
 
@@ -357,7 +357,7 @@ e1:
 		}
 	}
 e0:
-	up_read(&current->mm->mmap_sem);
+	up_read(&current->mm->mmap_lock);
 	return IMG_FALSE;
 }
 
@@ -387,7 +387,7 @@ static IMG_BOOL _TryGetUserPages(IMG_DEVMEM_SIZE_T uiSize,
 {
 	IMG_INT32 iMappedPages, i;
 
-	down_read(&current->mm->mmap_sem);
+	down_read(&current->mm->mmap_lock);
 
 	/* Do the actual call */
 	iMappedPages = get_user_pages((uintptr_t) pvCpuVAddr,
@@ -397,7 +397,7 @@ static IMG_BOOL _TryGetUserPages(IMG_DEVMEM_SIZE_T uiSize,
 	                              NULL);
 	if (iMappedPages == 0 || iMappedPages != psPrivData->uiTotalNumPages)
 	{
-		up_read(&current->mm->mmap_sem);
+		up_read(&current->mm->mmap_lock);
 
 		PVR_DPF((PVR_DBG_MESSAGE,
 		         "get_user_pages() failed, got back %d, expected num pages %d",
@@ -413,7 +413,7 @@ static IMG_BOOL _TryGetUserPages(IMG_DEVMEM_SIZE_T uiSize,
 		psPrivData->ppvPhysAddr[i].uiAddr = page_to_phys(psPrivData->ppsPageArray[i]);
 	}
 
-	up_read(&current->mm->mmap_sem);
+	up_read(&current->mm->mmap_lock);
 
 	return IMG_TRUE;
 }
-- 
2.17.1

